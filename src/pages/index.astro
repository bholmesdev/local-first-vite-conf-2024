---
import SearchIcon from '~icons/mingcute/search2-fill';
import CloseIcon from '~icons/mingcute/close-fill';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body class="text-gray-950">
		<nav>
			<button
				id="search-trigger"
				class="flex justify-between items-center px-4 py-2 text-gray-400 border border-gray-200 bg-gray-50 rounded w-full max-w-72 mx-auto my-8"
			>
				Search
				<SearchIcon />
			</button>

			<dialog id="search-dialog" class="max-w-prose w-full h-[70dvh] rounded shadow-2xl sm:p-8 p-4">
				<h2 class="sr-only">Search</h2>
				<div class="flex gap-4 items-center mb-4">
					<form
						class="flex gap-2 px-4 py-2 relative rounded border border-slate-300 w-full justify-end"
					>
						<label class="sr-only" for="search">Search</label>
						<input
							type="text"
							placeholder="Search"
							id="search"
							class="absolute inset-0 w-full h-full px-4 py-2 pr-12 rounded"
						/>
						<SearchIcon class="z-10" />
					</form>
					<form method="dialog" class="leading-none">
						<button><span class="sr-only">Close</span><CloseIcon /></button>
					</form>
				</div>
				<ul id="search-results" class="flex flex-col gap-4"></ul>
			</dialog>
		</nav>
		<main class="mx-auto max-w-prose px-4 py-2 sm:px-32 sm:py-16 shadow-xl min-h-dvh">
			<h1 id="title" contenteditable="plaintext-only" class="text-2xl font-bold mb-4 outline-none">
			</h1>
			<article id="text" contenteditable="plaintext-only" class="outline-none"></article>
			<label
				class="fixed bottom-4 right-4 rounded bg-gray-50 text-gray-800 text-sm shadow flex flex-col gap-2 p-4 w-56"
				>Seed a SQLite file
				<input type="file" id="migration-trigger" />
			</label>
		</main>
	</body>
</html>

<script is:inline src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/@tensorflow-models/universal-sentence-encoder"
></script>

<script>
	import { eq, like, isNull } from 'drizzle-orm';
	import { db, Docs, initTables } from '../lib/db';
	import { cosineSimilarity, getElement, viewTransition } from '../utils';
	import type { UniversalSentenceEncoder } from '@tensorflow-models/universal-sentence-encoder';

	const title = getElement('title');
	const text = getElement('text');
	const search = getElement('search') as HTMLInputElement;
	const searchDialog = getElement('search-dialog') as HTMLDialogElement;
	const searchResults = getElement('search-results');
	const searchTrigger = getElement('search-trigger');

	let model: UniversalSentenceEncoder | null = null;

	async function initEditor() {
		let docId = Number(window.location.hash.slice(1));

		async function initContent() {
			let doc = await db.select().from(Docs).where(eq(Docs.id, docId)).get();
			if (!doc) {
				doc = await db.insert(Docs).values({ title: 'Untitled', text: '' }).returning().get();
				window.location.hash = `${doc.id}`;
			}

			title.innerText = doc.title;
			text.innerText = doc.text;
		}
		await initContent();

		window.addEventListener('hashchange', () => {
			viewTransition(() => searchDialog.close());
			docId = Number(window.location.hash.slice(1));
			initContent();
		});

		title.addEventListener('input', async () => {
			await db.update(Docs).set({ title: title.innerText }).where(eq(Docs.id, docId));
			await initVectors();
		});

		text.addEventListener('input', async () => {
			await db.update(Docs).set({ text: text.innerText }).where(eq(Docs.id, docId));
			await initVectors();
		});

		searchTrigger.addEventListener('click', () => {
			viewTransition(() => searchDialog.showModal());
		});

		const migrationTrigger = getElement('migration-trigger') as HTMLInputElement;
		migrationTrigger.addEventListener('input', async () => {
			const files = migrationTrigger.files;
			const sqliteFile = files?.item(0);
			if (!sqliteFile) return;
			const opfsRoot = await navigator.storage.getDirectory();
			const fileHandle = await opfsRoot.getFileHandle('database.sqlite3');
			const writable = await fileHandle.createWritable();

			await writable.truncate(0);
			for await (const chunk of sqliteFile.stream()) {
				await writable.write(chunk);
			}
			await writable.close();
			window.location.reload();
		});
	}

	async function initVectors() {
		if (!model) return;
		const dataset = await db.select().from(Docs).where(isNull(Docs.vector));
		if (dataset.length === 0) return;

		for (const doc of dataset) {
			const embedding = await model.embed([doc.title]).then((e) => e.data());

			await db
				.update(Docs)
				.set({
					vector: Array.from(embedding)
				})
				.where(eq(Docs.id, doc.id));
		}
	}

	search.addEventListener('input', async (e) => {
		const query = search.value;
		if (!query.length) {
			searchResults.innerHTML = '';
			return;
		}
		const results = model ? await vectorSearch(query) : await textSearch(query);
		searchResults.innerHTML = '';
		for (const result of results) {
			searchResults.innerHTML += `<li><a href="/#${result.id}">${result.title} ${'similarity' in result ? result.similarity : ''}</a></li>`;
		}
	});

	function textSearch(query: string) {
		return db
			.select()
			.from(Docs)
			.where(like(Docs.title, `%${query}%`))
			.orderBy(Docs.title);
	}

	async function vectorSearch(query: string) {
		if (!model) return [];
		const results = await db.select().from(Docs).orderBy(Docs.title);

		const queryEmbedding = await model.embed([query]).then((e) => e.data());

		return results
			.map((row) => {
				const docEmbedding = row.vector;
				if (!docEmbedding) return { ...row, similarity: 0 };

				const similarity = cosineSimilarity(Array.from(queryEmbedding), docEmbedding);
				return { ...row, similarity };
			})
			.sort((a, b) => b.similarity - a.similarity);
	}

	await initTables();
	await initEditor();
	use.load().then((m) => {
		console.log('Model loaded');
		model = m;
		initVectors();
	});
</script>
