---
import SearchIcon from '~icons/mingcute/search2-fill';
import CloseIcon from '~icons/mingcute/close-fill';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body class="text-gray-950">
		<nav>
			<button
				id="search-trigger"
				class="flex justify-between items-center px-4 py-2 text-gray-400 border border-gray-200 bg-gray-50 rounded w-full max-w-72 mx-auto my-8"
			>
				Search
				<SearchIcon />
			</button>

			<dialog id="search-dialog" class="max-w-prose w-full h-[70dvh] rounded shadow-2xl sm:p-8 p-4">
				<h2 class="sr-only">Search</h2>
				<div class="flex gap-4 items-center mb-4">
					<form
						class="flex gap-2 px-4 py-2 relative rounded border border-slate-300 w-full justify-end"
					>
						<label class="sr-only" for="search">Search</label>
						<input
							type="text"
							placeholder="Search"
							id="search"
							class="absolute inset-0 w-full h-full px-4 py-2 pr-12 rounded"
						/>
						<SearchIcon class="z-10" />
					</form>
					<form method="dialog" class="leading-none">
						<button><span class="sr-only">Close</span><CloseIcon /></button>
					</form>
				</div>
				<ul id="search-results" class="flex flex-col gap-4"></ul>
			</dialog>
		</nav>
		<main class="mx-auto max-w-prose px-4 py-2 sm:px-32 sm:py-16 shadow-xl min-h-dvh">
			<h1 id="title" contenteditable="plaintext-only" class="text-2xl font-bold mb-4 outline-none">
			</h1>
			<article id="text" contenteditable="plaintext-only" class="outline-none"></article>
			<label
				class="fixed bottom-4 right-4 rounded bg-gray-50 text-gray-800 text-sm shadow flex flex-col gap-2 p-4 w-56"
				>Seed a SQLite file
				<input type="file" id="seed-trigger" />
			</label>
		</main>
	</body>
</html>

<script>
	import { eq, like, isNull } from 'drizzle-orm';
	import { db, Docs, initTables } from '../lib/db';
	import { cosineSimilarity, getElement, viewTransition } from '../utils';
	import type { UniversalSentenceEncoder } from '@tensorflow-models/universal-sentence-encoder';

	const title = getElement('title');
	const text = getElement('text');

	let model: UniversalSentenceEncoder | null = null;

	async function initEditor() {
		let docId = Number(window.location.hash.slice(1));

		async function initContent() {
			// Init content and inputs
		}
		await initContent();

		window.addEventListener('hashchange', () => {
			docId = Number(window.location.hash.slice(1));
			initContent();
		});
	}

	async function initVectors() {
		// Add or update embeddings for all documents
	}

	function textSearch(query: string) {
		// Search wtih SQLite LIKE
		return [];
	}

	async function vectorSearch(query: string) {
		// Search with tensorflow vectors
		return [];
	}

	await initTables();
	await initEditor();
</script>
